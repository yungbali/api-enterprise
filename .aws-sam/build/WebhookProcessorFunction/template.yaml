AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Enterprise Suite API - Serverless deployment

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: python3.9
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        LOG_LEVEL: INFO
        DATABASE_URL: !Sub 
          - postgresql://${Username}:${Password}@${Endpoint}:${Port}/${DBName}
          - Username: !Ref DBUsername
            Password: !Ref DBPassword
            Endpoint: !GetAtt PostgreSQLDB.Endpoint.Address
            Port: !GetAtt PostgreSQLDB.Endpoint.Port
            DBName: !Ref DBName
        REDIS_URL: !Sub 
          - redis://${Endpoint}:${Port}/0
          - Endpoint: !GetAtt RedisCluster.RedisEndpoint.Address
            Port: !GetAtt RedisCluster.RedisEndpoint.Port
        S3_BUCKET_NAME: !Ref S3Bucket

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name
    
  DBUsername:
    Type: String
    Default: enterprise_user
    Description: Database username
    
  DBPassword:
    Type: String
    NoEcho: true
    Description: Database password
    MinLength: 8
    
  DBName:
    Type: String
    Default: enterprise_suite_db
    Description: Database name

Resources:
  # API Gateway and Lambda
  EnterpriseAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      # Auth:
      #   ApiKeyRequired: true

  # Main Lambda Function
  EnterpriseAPIFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: app/lambda_handler.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref EnterpriseAPI
            Path: /{proxy+}
            Method: ANY
      Environment:
        Variables:
          SECRET_KEY: !Ref SecretKey
          JWT_SECRET_KEY: !Ref JWTSecretKey
          WEBHOOK_SECRET: !Ref WebhookSecret
          DATABASE_URL: sqlite:///./test.db
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref S3Bucket
        - S3WritePolicy:
            BucketName: !Ref S3Bucket
        - Statement:
            - Effect: Allow
              Action:
                - rds:*
              Resource: !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:*"
        - Statement:
            - Effect: Allow
              Action:
                - elasticache:*
              Resource: "*"
        - Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: "*"
        - Statement:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref DeliveryTopic

  # Background Processing Functions
  DeliveryProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: app.lambda_handlers.delivery_processor.handler
      Events:
        DeliveryEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBridge
            Pattern:
              source: ["enterprise-suite"]
              detail-type: ["Release Delivery"]
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref S3Bucket
        - Statement:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref DeliveryTopic

  WebhookProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: app.lambda_handlers.webhook_processor.handler
      Events:
        WebhookEvent:
          Type: SNS
          Properties:
            Topic: !Ref DeliveryTopic
      Environment:
        Variables:
          WEBHOOK_TIMEOUT: 30

  # Database
  PostgreSQLDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub "${Environment}-enterprise-suite-db"
      DBName: !Ref DBName
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: "13.21"
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      AllocatedStorage: 20
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      BackupRetentionPeriod: 7
      MultiAZ: false
      PubliclyAccessible: false
      StorageEncrypted: true
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Redis Cache
  RedisCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: cache.t3.micro
      Engine: redis
      NumCacheNodes: 1
      VpcSecurityGroupIds:
        - !Ref RedisSecurityGroup
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # S3 Bucket for assets
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-enterprise-suite-assets"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ["*"]
            MaxAge: 3600

  # Event Bridge for delivery events
  EventBridge:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "${Environment}-enterprise-suite-events"

  # SNS Topic for notifications
  DeliveryTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${Environment}-enterprise-suite-delivery"

  # VPC and Security Groups
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-enterprise-suite-vpc"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-private-subnet-1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-private-subnet-2"

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-db-subnet-group"

  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for Redis
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref LambdaSecurityGroup

  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Redis
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref LambdaSecurityGroup

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Secrets
  SecretKey:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${Environment}/enterprise-suite/secret-key"
      Type: String
      Value: "your-secret-key-here-change-in-production"

  JWTSecretKey:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${Environment}/enterprise-suite/jwt-secret-key"
      Type: String
      Value: "your-jwt-secret-key-here-change-in-production"

  WebhookSecret:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${Environment}/enterprise-suite/webhook-secret"
      Type: String
      Value: "your-webhook-secret-here-change-in-production"

Outputs:
  EnterpriseAPIUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${EnterpriseAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${Environment}-enterprise-suite-api-url"

  S3BucketName:
    Description: "S3 bucket name for assets"
    Value: !Ref S3Bucket
    Export:
      Name: !Sub "${Environment}-enterprise-suite-s3-bucket"

  DatabaseEndpoint:
    Description: "RDS endpoint"
    Value: !GetAtt PostgreSQLDB.Endpoint.Address
    Export:
      Name: !Sub "${Environment}-enterprise-suite-db-endpoint"

  RedisEndpoint:
    Description: "Redis endpoint"
    Value: !GetAtt RedisCluster.RedisEndpoint.Address
    Export:
      Name: !Sub "${Environment}-enterprise-suite-redis-endpoint"
